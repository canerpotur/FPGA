module vga_controller(

	vga_clock,

	
	pixel_colour,

	x, 

	y,

	VGA_R,

	VGA_G,

	VGA_B,

	VGA_HS,

	VGA_VS,

	VGA_BLANK,

	VGA_SYNC,

	VGA_CLK

);	

	/* Screen resolution and colour depth parameters. */

	



	//--- Timing parameters.

	/* Recall that the VGA specification requires a few more rows and columns are drawn

	 * when refreshing the screen than are actually present on the screen. This is necessary to

	 * generate the vertical and the horizontal syncronization signals. If you wish to use a

	 * display mode other than 640x480 you will need to modify the parameters below as well

	 * as change the frequency of the clock driving the monitor (VGA_CLK).

	 */

	parameter C_VERT_NUM_PIXELS  = 10'd480;

	parameter C_VERT_SYNC_START  = 10'd493;

	parameter C_VERT_SYNC_END    = 10'd494; //(C_VERT_SYNC_START + 2 - 1); 

	parameter C_VERT_TOTAL_COUNT = 10'd525;



	parameter C_HORZ_NUM_PIXELS  = 10'd640;

	parameter C_HORZ_SYNC_START  = 10'd659;

	parameter C_HORZ_SYNC_END    = 10'd754; //(C_HORZ_SYNC_START + 96 - 1); 

	parameter C_HORZ_TOTAL_COUNT = 10'd800;	

		


	/*****************************************************************************/

	/* Declare inputs and outputs.                                               */

	/*****************************************************************************/

	

	input			vga_clock;

	input	[2:0]	pixel_colour;

	output	[9:0]	x;

	output	[9:0]	y;

	output reg[7:0] VGA_R;

	output reg[7:0] VGA_G;

	output reg[7:0] VGA_B;

	output reg		VGA_HS;

	output reg		VGA_VS;

	output reg		VGA_BLANK;

	output			VGA_SYNC;

	output			VGA_CLK;

	

	/*****************************************************************************/

	/* Local Signals.                                                            */

	/*****************************************************************************/

	

	reg				VGA_HS1;

	reg				VGA_VS1;

	reg				VGA_BLANK1; 

	reg		[9:0]	xCounter=0;

	reg		[9:0]	yCounter=0;

	wire			xCounter_clear;

	wire			yCounter_clear;

	

	/* Inputs to the converter. */

	

	/*****************************************************************************/

	/* Controller implementation.                                                */

	/*****************************************************************************/



	

	/* A counter to scan through a horizontal line. */

	always @(posedge vga_clock)

	begin

		if (xCounter_clear)

			xCounter <= 10'd0;

		else

		begin

			xCounter <= xCounter + 1'b1;

		end

	end

	assign xCounter_clear = (xCounter == (C_HORZ_TOTAL_COUNT-1));



	/* A counter to scan vertically, indicating the row currently being drawn. */

	always @(posedge vga_clock)

	begin

		if (xCounter_clear && yCounter_clear)

			yCounter <= 10'd0;

		else if (xCounter_clear)		//Increment when x counter resets

			yCounter <= yCounter + 1'b1;

	end

	assign yCounter_clear = (yCounter == (C_VERT_TOTAL_COUNT-1)); 

	

	assign x = xCounter;

	assign y = yCounter;

	

	/* Generate the vertical and horizontal synchronization pulses. */

	always @(posedge vga_clock)

	begin

		//- Sync Generator (ACTIVE LOW)

		VGA_HS1 <= ~((xCounter >= C_HORZ_SYNC_START) && (xCounter <= C_HORZ_SYNC_END));

		VGA_VS1 <= ~((yCounter >= C_VERT_SYNC_START) && (yCounter <= C_VERT_SYNC_END));

		

		//- Current X and Y is valid pixel range

		VGA_BLANK1 <= ((xCounter < C_HORZ_NUM_PIXELS) && (yCounter < C_VERT_NUM_PIXELS));	

	

		//- Add 1 cycle delay

		VGA_HS <= VGA_HS1;

		VGA_VS <= VGA_VS1;

		VGA_BLANK <= VGA_BLANK1;	

	end

	

	/* VGA sync should be 1 at all times. */

	assign VGA_SYNC = 1'b1;

	

	/* Generate the VGA clock signal. */

	assign VGA_CLK = vga_clock;


	always @(pixel_colour)begin

		VGA_R<={8{pixel_colour[2]}};

		VGA_G<={8{pixel_colour[1]}};

		VGA_B<={8{pixel_colour[0]}};	
//{8{pixel_colour[0]}}
	end

	





endmodule